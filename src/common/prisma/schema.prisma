generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CONSTITUENCY_HEAD
  WARD_HEAD
  PU_HEAD
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  phoneNumber  String? @unique
  email        String  @unique
  password     String
  isActive     Boolean @default(false)
  authStrategy String?
  role         Role

  firstName  String
  lastName   String
  otherNames String?
  country    String  @default("nigeria")

  createdByUserId String?
  puUnitId        String?

  constituenciesLed Constituency[] @relation("UserConstituencyHead")
  wardsLed          Ward[]         @relation("UserWardHead")
  pollingUnitsLed   PollingUnit[]  @relation("UserPUHead")
  resultsUploaded   Result[]
  issuesReported    IssueReport[]
  Result            Result[]       @relation("UserResults")
  IssueReport       IssueReport[]  @relation("UserIssues")

  @@map("user")
}

model State {
  id   String @id @default(uuid())
  name String
  code String @unique

  lgas            LocalGovernment[]
  LocalGovernment LocalGovernment[] @relation("StateLGAs")

  @@unique([name])
}

model LocalGovernment {
  id      String @id @default(uuid())
  name    String
  stateId String

  state State   @relation("StateLGAs", fields: [stateId], references: [id])
  wards Ward[]  @relation("LGAWards")
  State State[]

  @@unique([name, stateId])
}

model Constituency {
  id        String   @id @default(uuid())
  name      String
  headId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  head  User   @relation("UserConstituencyHead", fields: [headId], references: [id])
  wards Ward[] @relation("ConstituencyWards")
}

model Ward {
  id             String   @id @default(uuid())
  name           String
  constituencyId String
  headId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  constituency     Constituency      @relation("ConstituencyWards", fields: [constituencyId], references: [id])
  head             User              @relation("UserWardHead", fields: [headId], references: [id])
  pollingUnits     PollingUnit[]     @relation("WardPollingUnits")
  localGovernments LocalGovernment[] @relation("LGAWards")
}

model PollingUnit {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  status    String
  wardId    String
  headId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ward Ward @relation("WardPollingUnits", fields: [wardId], references: [id])
  head User @relation("UserPUHead", fields: [headId], references: [id])

  results Result[]
  issues  IssueReport[]

  Result Result[] @relation("PollingUnitResults")

  IssueReport IssueReport[] @relation("PollingUnitIssues")
}

model Result {
  id            String   @id @default(uuid())
  pollingUnitId String
  uploadedBy    String
  imageUrl      String
  status        String
  notes         String?
  createdAt     DateTime @default(now())

  pollingUnit PollingUnit @relation("PollingUnitResults", fields: [pollingUnitId], references: [id])
  uploader    User        @relation("UserResults", fields: [uploadedBy], references: [id])

  PollingUnit PollingUnit[]

  User User[]
}

model IssueReport {
  id            String   @id @default(uuid())
  pollingUnitId String
  reportedBy    String
  type          String
  description   String
  status        String
  imageUrl      String?
  isUrgent      Boolean  @default(false)
  createdAt     DateTime @default(now())

  pollingUnit PollingUnit   @relation("PollingUnitIssues", fields: [pollingUnitId], references: [id])
  reporter    User          @relation("UserIssues", fields: [reportedBy], references: [id])
  PollingUnit PollingUnit[]
  User        User[]
}

model PasswordResetToken {
  email     String
  token     String   @id
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model BlacklistedToken {
  token     String   @id
  createdAt DateTime @default(now())
  expiresAt DateTime
}
